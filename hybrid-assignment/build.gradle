buildscript {
    repositories {
        // LensKit snapshots are published to the Sonatype snapshot repository
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        // LensKit releases are published to Maven Central
        mavenCentral()
    }
    dependencies {
        classpath 'org.lenskit:lenskit-gradle:3.0-M2'
    }

}

ext.lenskitVersion = '3.0-M2'
if (!hasProperty('dataDir')) {
    ext.dataDir = 'data'
}
//ext.dataDirLBSN = 'D:/postdoc/datos'
//ext.dataDirLBSN = 'C:/Users/Usuario/Desktop/carlos/Tesis/workspaceJ/lenskit-hello-lbsn/data'
ext.dataDirLBSN = '/home/crios/postdoc/datos'



ext.userIds = (project.findProperty('userId') ?: '320').split(/,/).toList()
ext.itemIds = (project.findProperty('itemIds') ?: '260,153,527,588').split(/,/).toList()
ext.baseline = project.findProperty('baseilne') ?: 'pers-mean'

ext.userIdsLBSN = (project.findProperty('userId') ?: '311,429').split(/,/).toList()

apply plugin: 'java' // if you use Groovy or Scala, add those plugins
apply plugin: 'lenskit'

apply from: "$rootDir/gradle/repositories.gradle"

dependencies {
    compile "org.lenskit:lenskit-all:$lenskitVersion"
    compile "org.apache.lucene:lucene-analyzers:3.5.0"
    compile "org.apache.lucene:lucene-queries:3.5.0"

    runtime "org.lenskit:lenskit-cli:$lenskitVersion"
}
task recommendBasicLBSN(type: JavaExec, group: 'run') {
    description 'Runs the recommender with the basic profile.'
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-basic.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', "$dataDirLBSN/yelp.yml"
    args '-c', file('cfg/cbf-basic.groovy')
    args userIdsLBSN
    if (project.hasProperty('lenskit.maxMemory')) {
        maxHeapSize project.getProperty('lenskit.maxMemory')
    }
}
task recommendWeightedLBSN(type: JavaExec, group: 'run') {
    description 'Runs the recommender with the basic profile.'
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-weighted.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', "$dataDirLBSN/yelp.yml"
    args '-c', file('cfg/cbf-weighted.groovy')
    args userIdsLBSN
    if (project.hasProperty('lenskit.maxMemory')) {
        maxHeapSize project.getProperty('lenskit.maxMemory')
    }
}
task recommendUULBSN(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-uu.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDirLBSN/yelp.yml")
    args '-c', file('cfg/uu.groovy')
    args userIdsLBSN
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
    systemProperties(
            blendWeight: project.findProperty('blendWeight'),
            predictor: 'bias')
}

task recommendPopularLBSN(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-popular.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDirLBSN/yelp.yml")
    args '-c', file('cfg/popular.groovy')
    args userIdsLBSN
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
    systemProperties(
            blendWeight: project.findProperty('blendWeight'),
            predictor: 'bias')
}

task recommendSVD(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-lucene-svd.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDir/movielens.yml")
    args '-c', file('cfg/svd.groovy')
    args userIds
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
    systemProperties(
            blendWeight: project.findProperty('blendWeight'),
            predictor: 'bias')
}

task recommendSVDLBSN(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-lucene-svd.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDirLBSN/yelp.yml")
    args '-c', file('cfg/svd.groovy')
    args userIdsLBSN
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
    systemProperties(
            blendWeight: project.findProperty('blendWeight'),
            predictor: 'bias')
}


task recommendLucene(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-lucene-svd.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDir/movielens.yml")
    args '-c', file('cfg/lucene.groovy')
    args userIds
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
    systemProperties(
            blendWeight: project.findProperty('blendWeight'),
            predictor: 'bias')
}

task recommendLuceneLBSN(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-lucene.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDirLBSN/yelp.yml")
    args '-c', file('cfg/lucene.groovy')
    args userIdsLBSN
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
    systemProperties(
            blendWeight: project.findProperty('blendWeight'),
            predictor: 'bias')
}

task recommendIILBSN(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-ii.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDirLBSN/yelp.yml")
    args '-c', file('cfg/ii.groovy')
    args userIdsLBSN
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
    systemProperties(
            blendWeight: project.findProperty('blendWeight'),
            predictor: 'bias')
}

task recommendLuceneSVD(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-lucene-svd.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDir/movielens.yml")
    args '-c', file('cfg/lucene-svd.groovy')
    args userIds
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
    systemProperties(
            blendWeight: project.findProperty('blendWeight'),
            predictor: 'bias')
}

task recommendLuceneSVDLBSN(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-lucene-svd.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDirLBSN/yelp.yml")
    args '-c', file('cfg/lucene-svd.groovy')
    args userIdsLBSN
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
    systemProperties(
            blendWeight: project.findProperty('blendWeight'),
            predictor: 'bias')
}

task recommendIISVD(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-ii-svd.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDir/movielens.yml")
    args '-c', file('cfg/ii-svd.groovy')
    args userIds
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
    systemProperties(
            blendWeight: project.findProperty('blendWeight'),
            predictor: 'ii')
}

task recommendIISVDLBSN(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-ii-svd.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDirLBSN/yelp.yml")
    args '-c', file('cfg/ii-svd.groovy')
    args userIdsLBSN
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
    systemProperties(
            blendWeight: project.findProperty('blendWeight'),
            predictor: 'ii')
}


task recommendIISVDLogLBSN(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-ii-svd-log.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDirLBSN/yelp.yml")
    args '-c', file('cfg/ii-svd-log.groovy')
    args userIdsLBSN
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
    systemProperties(
            blendWeight: project.findProperty('blendWeight'),
            predictor: 'ii')
}

task recommendSVDLog(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-svd-log.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDir/movielens.yml")
    args '-c', file('cfg/svd-log.groovy')
    args userIds
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
}

task recommendSVDLogLBSN(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-svd-log.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDirLBSN/yelp.yml")
    args '-c', file('cfg/svd-log.groovy')
    args userIdsLBSN
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
}

task recommendLuSvUuCbfwLBSN(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-svd-log.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDirLBSN/yelp.yml")
    args '-c', file('cfg/lucene-svd-uu-cbfweight-log.groovy')
    args userIdsLBSN
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
}

task recommendLuceneSVDLog(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-lucene-svd-log.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDir/movielens.yml")
    args '-c', file('cfg/lucene-svd-log.groovy')
    args userIds
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
}

task recommendLuceneSVDLogLBSN(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/recommend-lucene-svd-log.log"), '--log-file-level', 'DEBUG'
    args 'recommend'
    args '--data-source', file("$dataDirLBSN/yelp.yml")
    args '-c', file('cfg/lucene-svd-log.groovy')
    args userIdsLBSN
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
}


task runAll(group: 'run', dependsOn: ['recommendLuceneSVD', 'recommendIISVD',
                                      'recommendSVDLog', 'recommendLuceneSVDLog'])

task graphSVDLog(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/graph-svd-log.log"), '--log-file-level', 'DEBUG', '--debug-grapht'
    args 'graph'
    args '-o', "$buildDir/svd-log.dot"
    args file('cfg/svd-log.groovy')
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
    systemProperties(
            blendWeight: project.findProperty('blendWeight'),
            predictor: 'ii')
}

task graphLuceneSVDLog(type: JavaExec, group: 'run') {
    classpath sourceSets.main.runtimeClasspath
    main 'org.lenskit.cli.Main'
    args '--log-file', file("$buildDir/graph-lucene-svd-log.log"), '--log-file-level', 'DEBUG', '--debug-grapht'
    args 'graph'
    args '-o', "$buildDir/lucene-svd-log.dot"
    args file('cfg/svd-log.groovy')
    if (lenskit.maxMemory) {
        maxHeapSize lenskit.maxMemory
    }
    systemProperties(
            blendWeight: project.findProperty('blendWeight'),
            predictor: 'ii')
}

task prepareSubmission(type: Copy, group: 'package') {
    from jar
    into distsDir
    rename(/-assignment/, '-submission')
}

import org.lenskit.gradle.Crossfold
import org.lenskit.gradle.TrainTest

task crossfold(type: Crossfold, group: 'evaluate') {
    // download data before evaluating

    input "$dataDir/movielens.yml"
    // test on random 1/5 of each user's ratings
    holdout(5, 'random')
    // use 5-fold cross-validation
    partitionCount 5
    outputFormat 'gz'
}

task crossfoldLBSN(type: Crossfold, group: 'evaluate') {
    // download data before evaluating

    input "$dataDirLBSN/yelp.yml"
    //method "SAMPLE_USERS"
    //sampleSize=1000
     	
    // test on random 1/5 of each user's ratings
    holdout(5, 'random')

    // test on random 1/5 of each user's ratings
    //holdoutFraction(0.3, 'random')
	
    // use 5-fold cross-validation
    partitionCount 3
    outputFormat 'gz'
}

/* Sweep the hybrid parameters */
task sweepHybridLBSN(type: TrainTest, group: 'evaluate') {
    description 'Runs a LensKit evaluation to sweep hybrid parameters.'

    // we add our crossfold task as evaluation input
    dataSet crossfoldLBSN

    // send the output to appropriate files
    outputFile "build/sweep-resultsLBSN.csv"
    userOutputFile "build/sweep-usersLBSN.csv"
    cacheDirectory "build/eval-cache"
    logFile "build/sweep-usersLBSN.log"

    // configure our algorithms
    algorithm 'cfg/hybridsweep.groovy'
    algorithm 'cfg/ii.groovy'
    algorithm 'cfg/svd.groovy'
    algorithm 'cfg/lucene.groovy'
    algorithm 'cfg/uu.groovy'

    // and some evaluation tasks and metrics
    predict {
        metric 'coverage'
        metric 'rmse'
        metric 'ndcg'
        metric 'mae'
    }
    recommend {
        listSize 25
        candidates "allItems"
        exclude "user.trainItems"
        metric 'ndcg'
        metric('map') {
            goodItems 'user.testItems'
        }
        metric('mrr') {
            goodItems 'user.testItems'
        }
        metric('pr'){
            goodItems 'user.testItems'
        }
    }
}

/* Sweep the hybrid parameters */
task sweepHybrid(type: TrainTest, group: 'evaluate') {
    description 'Runs a LensKit evaluation to sweep hybrid parameters.'

    // we add our crossfold task as evaluation input
    dataSet crossfold

    // send the output to appropriate files
    outputFile "build/sweep-results.csv"
    userOutputFile "build/sweep-users.csv"
    cacheDirectory "build/eval-cache"
    logFile "build/sweep-users.log"

    // configure our algorithms
    algorithm 'cfg/hybridsweep.groovy'
    algorithm 'cfg/ii.groovy'
    algorithm 'cfg/svd.groovy'
    algorithm 'cfg/lucene.groovy'

    // and some evaluation tasks and metrics
    predict {
        metric 'coverage'
        metric 'rmse'
        metric 'ndcg'
    }
    recommend {
        listSize 25
        candidates "allItems"
        exclude "user.trainItems"
        metric 'ndcg'
        metric('map') {
            goodItems 'user.testItems'
        }
        metric('mrr') {
            goodItems 'user.testItems'
        }
    }
}

/* Evaluate logistic regression */
task evaluateLogistic(type: TrainTest, group: 'evaluate') {
    description 'Runs a LensKit evaluation to evaluate the logistic recommender.'

    // we add our crossfold task as evaluation input
    dataSet crossfold

    // send the output to appropriate files
    outputFile "build/logistic-results.csv"
    userOutputFile "build/logistic-users.csv"
    logFile "build/eval-logistic.log"

    // configure our algorithms
    algorithm 'cfg/popular.groovy'
    algorithm 'cfg/ii.groovy'
    algorithm 'cfg/svd.groovy'
    //algorithm 'cfg/lucene.groovy'
    //algorithm 'cfg/svd-log.groovy'
    algorithm 'cfg/lucene-log.groovy'
    algorithm 'cfg/lucene-svd-log.groovy'
    algorithm 'cfg/ii-log.groovy'
    algorithm 'cfg/ii-svd-log.groovy'

    // and some evaluation tasks and metrics
    predict {
        metric 'coverage'
        metric 'ndcg'
    }
    recommend {
        listSize 5
        candidates "allItems"
        exclude "user.trainItems"
        metric 'ndcg'
        metric('map') {
            goodItems 'user.testItems'
        }
        metric('mrr') {
            goodItems 'user.testItems'
        }
        metric('pr') {
            goodItems 'user.testItems'
        }
    }
}

task evaluateLogisticLBSN(type: TrainTest, group: 'evaluate') {
    description 'Runs a LensKit evaluation to evaluate the logistic recommender.'

    // we add our crossfold task as evaluation input
    dataSet crossfoldLBSN

    // send the output to appropriate files
    outputFile "build/logistic-resultsLBSN.csv"
    userOutputFile "build/logistic-usersLBSN.csv"
    logFile "build/eval-logisticLBSN.log"

    // configure our algorithms
    algorithm 'cfg/popular.groovy'
    algorithm 'cfg/ii.groovy'
    algorithm 'cfg/svd.groovy'
    algorithm 'cfg/lucene.groovy'
    algorithm 'cfg/uu.groovy'
    algorithm 'cfg/cbf-basic.groovy'
    algorithm 'cfg/cbf-weighted.groovy'
    
    algorithm 'cfg/svd-log.groovy'
    algorithm 'cfg/lucene-log.groovy'
    algorithm 'cfg/ii-log.groovy'
    algorithm 'cfg/ii-svd-log.groovy'
    algorithm 'cfg/lucene-svd-log.groovy'
    algorithm 'cfg/lucene-svd-uu-cbfweight-log.groovy'

    // and some evaluation tasks and metrics
    predict {
        metric 'coverage'
        metric 'ndcg'
    }
    recommend {
        listSize 25
        candidates user.testItems + pickRandom(allItems - user.trainItems, 100)
        exclude "user.trainItems"
        metric 'ndcg'
        metric('map') {
           	 goodItems 'user.testItems'
        }
        metric('mrr') {
            goodItems 'user.testItems'
        }
        metric('pr'){
            goodItems 'user.testItems'
        }
    }
}

task sweepNbrs(type: TrainTest, group: 'evaluate') {
    description 'Runs a LensKit evaluation to sweep nbrs for uu and ii.'

    // we add our crossfold task as evaluation input
    dataSet crossfoldLBSN

    // send the output to appropriate files
    outputFile "build/sweep-nbr-results.csv"
    userOutputFile "build/sweep-nbr-users.csv"
    cacheDirectory "build/eval-cache"
    logFile "build/sweep-nbr-users.log"

    // configure our algorithms
    algorithm 'cfg/uu-ii-nbr-sweep.groovy'

    // and some evaluation tasks and metrics
    predict {
        metric 'coverage'
        metric 'rmse'
        metric 'ndcg'
        metric 'mae'
    }
    recommend {
        listSize 25
        candidates "allItems"
        exclude "user.trainItems"
        metric 'ndcg'
        metric('map') {
            goodItems 'user.testItems'
        }
        metric('mrr') {
            goodItems 'user.testItems'
        }
    }
}
	
tasks.withType(TrainTest) {
    jvmArgs = ['-Xms1g', '-Xmx15g']
    threadCount 3
}
lenskit {
    threadCount 3
}

tasks.withType(TrainTest) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9099']
    }
}